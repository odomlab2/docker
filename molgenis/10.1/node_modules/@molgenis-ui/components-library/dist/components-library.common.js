'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script = {
  name: 'ActiveFilters',
  props: {
    /**
     * List of filter objects
     */
    filters: {
      type: Array,
      required: true
    },

    /**
     * Active filter values
     * @model
     */
    value: {
      type: Object,
      required: true
    }
  },
  data: function data() {
    return {
      activeValues: []
    };
  },
  watch: {
    value: {
      handler: function handler(newValue) {
        this.buildActiveValues(newValue);
      },
      immediate: true
    }
  },
  methods: {
    buildActiveValues: function buildActiveValues(newValue) {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var activeValues;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                activeValues = [];
                Object.entries(newValue).forEach( /*#__PURE__*/function () {
                  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
                    var _ref3, key, current, filter, value, option, options;

                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _ref3 = _slicedToArray(_ref, 2), key = _ref3[0], current = _ref3[1];
                            filter = _this.selectFilter(key); // Clean op the values by removing undefined entry's

                            if (!(current === undefined || Array.isArray(current) && !current.length)) {
                              _context.next = 4;
                              break;
                            }

                            return _context.abrupt("return");

                          case 4:
                            if (!(filter.type === 'date-time-filter')) {
                              _context.next = 8;
                              break;
                            }

                            if (current[0].toISOString() === current[1].toISOString()) {
                              value = current[0].toLocaleDateString();
                            } else {
                              value = "".concat(current[0].toLocaleDateString(), " - ").concat(current[1].toLocaleDateString());
                            }

                            activeValues.push({
                              key: key,
                              value: value,
                              label: filter.label
                            });
                            return _context.abrupt("return");

                          case 8:
                            if (!Array.isArray(current)) {
                              _context.next = 22;
                              break;
                            }

                            if (!(filter.type === 'checkbox-filter')) {
                              _context.next = 14;
                              break;
                            }

                            _context.next = 12;
                            return filter.options();

                          case 12:
                            option = _context.sent;
                            current.forEach(function (subKey) {
                              var findTextFromValue = option.filter(function (filterOption) {
                                return filterOption.value === subKey;
                              })[0];
                              activeValues.push({
                                key: key,
                                subKey: subKey,
                                value: findTextFromValue.text,
                                label: filter.label
                              });
                            });

                          case 14:
                            // Range Filter
                            if (filter.type === 'range-filter') {
                              if ((current[0] === null || current[0] === '') && current[1] != null) {
                                activeValues.push({
                                  key: key,
                                  value: "".concat(current[1], " and less"),
                                  label: filter.label
                                });
                              } else if (current[0] !== null && (current[1] === null || current[1] === '')) {
                                activeValues.push({
                                  key: key,
                                  value: "".concat(current[0], " and more"),
                                  label: filter.label
                                });
                              } else if (current[0] !== null && current[1] !== null) {
                                activeValues.push({
                                  key: key,
                                  value: "".concat(current[0], " to ").concat(current[1]),
                                  label: filter.label
                                });
                              }
                            }

                            if (!(filter.type === 'multi-filter')) {
                              _context.next = 20;
                              break;
                            }

                            _context.next = 18;
                            return filter.options({
                              nameAttribute: false,
                              queryType: 'in',
                              query: current.join(',')
                            });

                          case 18:
                            options = _context.sent;
                            current.forEach(function (subKey) {
                              var findTextFromValue = options.filter(function (filterOption) {
                                return filterOption.value === subKey;
                              })[0];
                              activeValues.push({
                                key: key,
                                subKey: subKey,
                                value: findTextFromValue.text,
                                label: filter.label
                              });
                            });

                          case 20:
                            _context.next = 23;
                            break;

                          case 22:
                            // Single item
                            activeValues.push({
                              key: key,
                              value: current,
                              label: filter.label
                            });

                          case 23:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x) {
                    return _ref2.apply(this, arguments);
                  };
                }());

                if (_this.value === newValue) {
                  _this.activeValues = activeValues;
                }

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    selectFilter: function selectFilter(key) {
      return this.filters.filter(function (filter) {
        return filter.name === key;
      })[0];
    },
    removeFilter: function removeFilter(_ref4) {
      var key = _ref4.key,
          subKey = _ref4.subKey;

      var selections = _objectSpread2({}, this.value);

      if (subKey === undefined) {
        delete selections[key];
      } else {
        selections[key] = selections[key].filter(function (selectionKey) {
          return selectionKey !== subKey;
        });
      }

      this.$emit('input', selections);
    }
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", {
    class: {
      "m-n1": _vm.activeValues.length > 0
    }
  }, _vm._l(_vm.activeValues, function (item, key) {
    return _c("button", {
      key: key,
      staticClass: "active-filter btn btn-light m-1 btn-outline-secondary",
      attrs: {
        type: "button"
      },
      on: {
        click: function click($event) {
          return _vm.removeFilter(item);
        }
      }
    }, [_vm._v("\n    " + _vm._s(item.label) + ": " + _vm._s(item.value) + "\n    "), _c("font-awesome-icon", {
      staticClass: "ml-1",
      attrs: {
        icon: "times"
      }
    })], 1);
  }), 0);
};

var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;
/* style */

var __vue_inject_styles__ = undefined;
/* scoped */

var __vue_scope_id__ = "data-v-c1e23d46";
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$1 = {
  name: 'ChangeFilters',
  props: {
    /**
     * The filters to select from
     * @model
     */
    filters: {
      type: Array,
      required: true
    },

    /**
     * The selected filters
     * @model
     */
    value: {
      type: Array,
      required: true
    }
  },
  data: function data() {
    return {
      selected: this.value
    };
  },
  watch: {
    value: {
      handler: function handler(newValue) {
        this.selected = _toConsumableArray(newValue);
      },
      immediate: true
    }
  },
  methods: {
    unique: function unique(value, index, items) {
      return items.indexOf(value) === index;
    },
    checkboxHandler: function checkboxHandler(option, state) {
      var _this = this;

      if (state) {
        this.selected.push(option.name);
      } else {
        this.selected = this.selected.filter(function (item) {
          return item !== option.name;
        });
      } // parent compound toggle


      if (option.type === 'compound-title') {
        var subCompounds = this.filters.filter(function (item) {
          return item.compound === option.name;
        }).map(function (item) {
          return item.name;
        });

        if (this.selected.includes(option.name)) {
          // Select all and make unique
          this.selected = [].concat(_toConsumableArray(this.selected), _toConsumableArray(subCompounds)).filter(this.unique);
        } else {
          // Deselect all
          this.selected = this.selected.filter(function (item) {
            return !subCompounds.includes(item);
          });
        }
      } // child compound toggle


      if (option.compound) {
        var _subCompounds = this.filters.filter(function (item) {
          return item.compound === option.compound;
        }).map(function (item) {
          return item.name;
        });

        var allSelected = _subCompounds.every(function (item) {
          return _this.selected.includes(item);
        });

        var noneSelected = _subCompounds.every(function (item) {
          return !_this.selected.includes(item);
        });

        var partialSelected = !allSelected && !noneSelected;

        if (allSelected) {
          this.selected = [option.compound].concat(_toConsumableArray(this.selected)).filter(this.unique);
        }

        if (noneSelected) {
          this.selected = this.selected.filter(function (item) {
            return item !== option.compound;
          });
        }

        if (partialSelected) {
          this.selected = this.selected.filter(function (item) {
            return item !== option.compound;
          });
        }
      }

      this.$emit('input', this.selected);
    }
  }
};

/* script */
var __vue_script__$1 = script$1;
/* template */

var __vue_render__$1 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", _vm._l(_vm.filters, function (option) {
    return _c("b-form-checkbox", {
      key: option.name,
      class: {
        "ml-4": option.compound
      },
      attrs: {
        checked: _vm.selected.includes(option.name)
      },
      on: {
        change: function change($event) {
          return _vm.checkboxHandler(option, $event);
        }
      }
    }, [option.label ? _c("span", [_c("span", {
      staticClass: "text-nowrap"
    }, [_vm._v(_vm._s(option.label))]), _vm._v(" "), _c("span", {
      staticClass: "text-secondary"
    }, [_c("small", [_c("span", {
      staticClass: "text-nowrap"
    }, [_vm._v("( " + _vm._s(option.name) + " )")])])])]) : _c("span", [_c("span", {
      staticClass: "text-nowrap"
    }, [_vm._v(_vm._s(option.name))])]), _vm._v(" "), _c("span", {
      staticClass: "text-secondary"
    }, [option.description ? _c("small", [_vm._v("- " + _vm._s(option.description))]) : _vm._e()])]);
  }), 1);
};

var __vue_staticRenderFns__$1 = [];
__vue_render__$1._withStripped = true;
/* style */

var __vue_inject_styles__$1 = undefined;
/* scoped */

var __vue_scope_id__$1 = "data-v-4348ba1e";
/* module identifier */

var __vue_module_identifier__$1 = undefined;
/* functional template */

var __vue_is_functional_template__$1 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$1 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$1,
  staticRenderFns: __vue_staticRenderFns__$1
}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$2 = {
  name: 'CheckboxFilter',
  props: {
    /**
     * Toggle to switch between returning an array with values or an array with the full option
     */
    returnTypeAsObject: {
      type: Boolean,
      required: false,
      default: function _default() {
        return false;
      }
    },

    /**
     * A Promise-function that resolves with an array of options.
     * {text: 'foo', value: 'bar'}
     */
    options: {
      type: [Function],
      required: true
    },

    /**
     * An array that contains values of options
     * which is used to only show the checkboxes that match
     * these values
     */
    optionsFilter: {
      type: Array,
      required: false
    },

    /**
     * This is the v-model value; an array of selected options.
     * Can also be a { text, value } object array
     */
    value: {
      type: Array,
      default: function _default() {
        return [];
      }
    },

    /**
     * Whether to use (De)Select All or not.
     */
    bulkOperation: {
      type: Boolean,
      required: false,
      default: function _default() {
        return true;
      }
    },

    /**
     * Limit the maximum number of visible items.
     */
    maxVisibleOptions: {
      type: Number,
      default: function _default() {
        return undefined;
      }
    }
  },
  data: function data() {
    return {
      externalUpdate: false,
      selection: [],
      resolvedOptions: [],
      sliceOptions: this.maxVisibleOptions && this.optionsToRender && this.maxVisibleOptions < this.optionsToRender.length
    };
  },
  computed: {
    visibleOptions: function visibleOptions() {
      return this.sliceOptions ? this.optionsToRender.slice(0, this.maxVisibleOptions) : typeof this.optionsToRender === 'function' ? [] : this.optionsToRender;
    },
    showToggleSlice: function showToggleSlice() {
      return this.maxVisibleOptions && this.maxVisibleOptions < this.optionsToRender.length;
    },
    toggleSelectText: function toggleSelectText() {
      return this.value.length ? 'Deselect all' : 'Select all';
    },
    toggleSliceText: function toggleSliceText() {
      return this.sliceOptions ? "Show ".concat(this.optionsToRender.length - this.maxVisibleOptions, " more") : 'Show less';
    },
    optionsToRender: function optionsToRender() {
      var _this = this;

      if (this.optionsFilter && this.optionsFilter.length) {
        return this.resolvedOptions.filter(function (option) {
          return _this.optionsFilter.includes(option.value);
        });
      } else {
        return this.resolvedOptions;
      }
    }
  },
  watch: {
    value: function value() {
      this.setValue();
    },
    resolvedOptions: function resolvedOptions() {
      this.sliceOptions = this.showToggleSlice;
    },
    selection: function selection(newValue) {
      if (!this.externalUpdate) {
        var newSelection = [];

        if (this.returnTypeAsObject) {
          newSelection = Object.assign(newSelection, this.optionsToRender.filter(function (of) {
            return newValue.includes(of.value);
          }));
        } else {
          newSelection = _toConsumableArray(newValue);
        }

        this.$emit('input', newSelection);
      }

      this.externalUpdate = false;
    }
  },
  created: function created() {
    var _this2 = this;

    this.options().then(function (response) {
      _this2.resolvedOptions = response;
    });
    this.setValue();
  },
  methods: {
    toggleSelect: function toggleSelect() {
      if (this.selection && this.selection.length > 0) {
        this.selection = [];
      } else {
        this.selection = this.optionsToRender.map(function (option) {
          return option.value;
        });
      }
    },
    toggleSlice: function toggleSlice() {
      this.sliceOptions = !this.sliceOptions;
    },
    setValue: function setValue() {
      this.externalUpdate = true;

      if (this.value && this.value.length > 0 && _typeof(this.value[0]) === 'object') {
        this.selection = this.value.map(function (vo) {
          return vo.value;
        });
      } else {
        this.selection = this.value;
      }
    }
  }
};

/* script */
var __vue_script__$2 = script$2;
/* template */

var __vue_render__$2 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", [_c("b-form-checkbox-group", {
    attrs: {
      stacked: "",
      options: _vm.visibleOptions
    },
    model: {
      value: _vm.selection,
      callback: function callback($$v) {
        _vm.selection = $$v;
      },
      expression: "selection"
    }
  }), _vm._v(" "), _vm.bulkOperation ? _c("span", [_vm.showToggleSlice ? _c("b-link", {
    staticClass: "toggle-slice card-link",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.toggleSlice($event);
      }
    }
  }, [_vm._v("\n      " + _vm._s(_vm.toggleSliceText) + "\n    ")]) : _vm._e(), _vm._v(" "), _c("b-link", {
    staticClass: "toggle-select card-link",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.toggleSelect($event);
      }
    }
  }, [_vm._v("\n      " + _vm._s(_vm.toggleSelectText) + "\n    ")])], 1) : _vm._e()], 1);
};

var __vue_staticRenderFns__$2 = [];
__vue_render__$2._withStripped = true;
/* style */

var __vue_inject_styles__$2 = undefined;
/* scoped */

var __vue_scope_id__$2 = undefined;
/* module identifier */

var __vue_module_identifier__$2 = undefined;
/* functional template */

var __vue_is_functional_template__$2 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$2 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$2,
  staticRenderFns: __vue_staticRenderFns__$2
}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$3 = {
  name: 'CartSelectionToast',
  props: {
    /**
     * Passthrough setting from BootstrapVue
     */
    toastClass: {
      type: [String, Object, Array]
    },

    /**
     * Passthrough setting from BootstrapVue
     */
    headerClass: {
      type: [String, Object, Array]
    },

    /**
     * Passthrough setting from BootstrapVue
     */
    bodyClass: {
      type: [String, Object, Array]
    },

    /**
    /**
     * Default descriptive text.
     * Use this to specify the amount of selected items in the cart
     * For example:
     * "3 items selected"
     */
    cartSelectionText: {
      type: String,
      required: true
    },

    /**
     * See: https://bootstrap-vue.org/docs/components/toast#b-toaster-target-component
     */
    location: {
      type: String,
      required: false,
      default: function _default() {
        return 'b-toaster-bottom-right';
      }
    },

    /**
     * See: https://bootstrap-vue.org/docs/reference/color-variants#color-variants-and-css-class-mapping
     */
    backgroundVariant: {
      type: String,
      required: false,
      default: function _default() {
        return 'info';
      }
    },

    /**
     * See: https://bootstrap-vue.org/docs/components/button#contextual-variants
     */
    buttonVariant: {
      type: String,
      required: false,
      default: function _default() {
        return 'secondary';
      }
    },

    /**
     * If this array is set (via v-model), then in will allow you to preview your selection
     * Expects a array of strings or a Array of objects
     * When using a array of objects provide the 'labelAttribute' to select the field to display
     */
    value: {
      type: Array,
      required: false,
      default: function _default() {
        return [];
      }
    },

    /**
     * Label attribute to display for use with object based store data.
     */
    labelAttribute: {
      type: String,
      required: false,
      default: function _default() {
        return 'name';
      }
    },

    /**
     * Button click handler
     */
    clickHandler: {
      type: Function,
      required: true
    }
  },
  data: function data() {
    return {
      previewToggle: false
    };
  },
  computed: {
    selectionText: function selectionText() {
      return this.previewToggle ? 'Hide' : 'Show';
    }
  },
  methods: {
    previewLabel: function previewLabel(item) {
      if (typeof item === 'string') {
        return item;
      } else if (_typeof(item) === 'object') {
        if (typeof item[this.labelAttribute] === 'string') {
          return item[this.labelAttribute];
        }
      }

      return '';
    },
    removeItem: function removeItem(itemName) {
      /**
       * v-model return value
       *
       * @event input
       * @property {Array} Returns new array without the deleted item
       */
      this.$emit('input', this.value.filter(function (item) {
        return item !== itemName;
      }));
    }
  }
};

/* script */
var __vue_script__$3 = script$3;
/* template */

var __vue_render__$3 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("b-toast", {
    attrs: {
      visible: "",
      "no-close-button": "",
      "no-auto-hide": "",
      toaster: _vm.location,
      variant: _vm.backgroundVariant,
      "toast-class": _vm.toastClass,
      "body-class": _vm.bodyClass,
      "header-class": _vm.headerClass
    }
  }, [_c("div", {
    staticClass: "container-fluid"
  }, [_vm.previewToggle && _vm.value.length > 0 ? _c("div", {
    staticClass: "mb-4"
  }, _vm._l(_vm.value, function (item, index) {
    return _c("div", {
      key: index,
      staticClass: "row"
    }, [_c("div", {
      staticClass: "col"
    }, [_vm._v("\n          " + _vm._s(_vm.previewLabel(item)) + "\n        ")]), _vm._v(" "), _c("div", {
      staticClass: "col-auto mb-2"
    }, [_c("span", {
      attrs: {
        role: "button"
      },
      on: {
        click: function click($event) {
          return _vm.removeItem(item);
        }
      }
    }, [_vm._t("removeButton", [_c("span", {
      staticClass: "fa fa-times"
    })])], 2)])]);
  }), 0) : _vm._e(), _vm._v(" "), _c("div", {
    staticClass: "row"
  }, [_c("div", {
    staticClass: "col d-flex flex-column justify-content-start align-self-center"
  }, [_c("div", {
    staticClass: "font-weight-bold"
  }, [_vm._v("\n          " + _vm._s(_vm.cartSelectionText) + "\n        ")]), _vm._v(" "), _vm.value.length > 0 ? _c("div", [_c("span", {
    attrs: {
      role: "button"
    },
    on: {
      click: function click($event) {
        _vm.previewToggle = !_vm.previewToggle;
      }
    }
  }, [_vm._v(_vm._s(_vm.selectionText) + " selection")])]) : _vm._e()]), _vm._v(" "), _c("div", {
    staticClass: "col-auto"
  }, [_c("b-button", {
    attrs: {
      variant: _vm.buttonVariant
    },
    on: {
      click: _vm.clickHandler
    }
  }, [_vm._t("buttonText", [_vm._v("\n            Request items\n          ")])], 2)], 1)])])]);
};

var __vue_staticRenderFns__$3 = [];
__vue_render__$3._withStripped = true;
/* style */

var __vue_inject_styles__$3 = undefined;
/* scoped */

var __vue_scope_id__$3 = undefined;
/* module identifier */

var __vue_module_identifier__$3 = undefined;
/* functional template */

var __vue_is_functional_template__$3 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$3 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$3,
  staticRenderFns: __vue_staticRenderFns__$3
}, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3, __vue_module_identifier__$3, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$4 = {
  name: 'DateTimeFilter',
  props: {
    /**
     * Define the start of your calendar range.
     * @values ISOString, null
     */
    min: {
      default: function _default() {
        return null;
      },
      type: [String, null]
    },

    /**
     * Define the end of your calendar range.
     * @values ISOString, null
     */
    max: {
      default: function _default() {
        return null;
      },
      type: [String, null]
    },

    /**
     * Defines a maximal Date/Datetime thats selectable in the calendar widget.
     * @values right, left, top, bottom
     */
    opens: {
      default: function _default() {
        return 'right';
      },
      type: String
    },

    /**
     * Toggles time selection in the calendar widget.
     * @values true, false
     */
    time: {
      type: Boolean,
      default: function _default() {
        return true;
      }
    },

    /**
     * Toggles single date selection; uses only min property in that case.
     * @values true, false
     */
    range: {
      type: Boolean,
      default: function _default() {
        return true;
      }
    },

    /**
     * The default selected date.
     * @model
     */
    value: {
      type: Array,
      default: function _default() {
        return [null, null];
      }
    },

    /**
     * Append the dialog to the body tag, useful if filter is used within a container that uses overflow:scroll
     * @model
     */
    appendToBody: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    }
  },
  data: function data() {
    return {
      dateRange: {
        startDate: null,
        endDate: null
      }
    };
  },
  computed: {
    formattedDate: function formattedDate() {
      var date = this.dateRange;

      if (!date.startDate || !date.endDate) {
        return 'Select...';
      }

      if (date.startDate.toISOString() === date.endDate.toISOString()) {
        return this.formatDate(date.startDate);
      } else {
        return "".concat(this.formatDate(date.startDate), " - ").concat(this.formatDate(date.endDate));
      }
    },
    pickerFormat: function pickerFormat() {
      return this.time ? 'yyyy-mm-dd HH:MM:ss' : 'yyyy-mm-dd';
    }
  },
  watch: {
    value: function value(newValue) {
      this.setDateRange(newValue);
    }
  },
  beforeMount: function beforeMount() {
    this.setDateRange(this.value);
  },
  methods: {
    clearValue: function clearValue() {
      this.dateRange = {
        startDate: null,
        endDate: null
      };
      this.$emit('input', undefined);
    },
    setDateRange: function setDateRange(value) {
      if (value) {
        this.dateRange.startDate = this.createDateFromValue(value[0]);
        this.dateRange.endDate = this.createDateFromValue(value[1]);
      }
    },
    updateValues: function updateValues() {
      this.$emit('input', [this.dateRange.startDate, this.dateRange.endDate]);
    },
    createDateFromValue: function createDateFromValue(value) {
      if (value) {
        return isNaN(value) ? new Date(Date.parse(value)) : new Date(value);
      }
    },
    formatDate: function formatDate(dateTime) {
      return this.time ? dateTime.toLocaleString() : dateTime.toLocaleDateString();
    }
  }
};

/* script */
var __vue_script__$4 = script$4;
/* template */

var __vue_render__$4 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("b-input-group", {
    staticClass: "flex-nowrap"
  }, [_c("date-range-picker", {
    ref: "picker",
    staticClass: "flex-grow-1",
    attrs: {
      opens: _vm.opens,
      "locale-data": {
        firstDay: 1,
        format: _vm.pickerFormat
      },
      "single-date-picker": !_vm.range,
      "time-picker": _vm.time,
      "time-picker24hour": true,
      "show-week-numbers": false,
      "show-dropdowns": true,
      "auto-apply": false,
      ranges: false,
      "linked-calendars": false,
      "always-show-calendars": true,
      "min-date": _vm.min,
      "max-date": _vm.max,
      "append-to-body": _vm.appendToBody
    },
    on: {
      update: _vm.updateValues
    },
    model: {
      value: _vm.dateRange,
      callback: function callback($$v) {
        _vm.dateRange = $$v;
      },
      expression: "dateRange"
    }
  }, [_c("template", {
    slot: "input"
  }, [_vm._v("\n      " + _vm._s(_vm.formattedDate) + "\n    ")])], 2), _vm._v(" "), _c("b-input-group-append", [_c("b-button", {
    staticClass: "t-btn-clear",
    attrs: {
      variant: "outline-secondary"
    },
    on: {
      click: _vm.clearValue
    }
  }, [_c("font-awesome-icon", {
    attrs: {
      icon: "times"
    }
  })], 1)], 1)], 1);
};

var __vue_staticRenderFns__$4 = [];
__vue_render__$4._withStripped = true;
/* style */

var __vue_inject_styles__$4 = undefined;
/* scoped */

var __vue_scope_id__$4 = undefined;
/* module identifier */

var __vue_module_identifier__$4 = undefined;
/* functional template */

var __vue_is_functional_template__$4 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$4 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$4,
  staticRenderFns: __vue_staticRenderFns__$4
}, __vue_inject_styles__$4, __vue_script__$4, __vue_scope_id__$4, __vue_is_functional_template__$4, __vue_module_identifier__$4, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$5 = {
  name: 'FilterCard',
  props: {
    /**
     * Extra class to style b-card-header
     */
    headerClass: {
      type: String,
      default: function _default() {
        return '';
      }
    },

    /**
     * Unique filter identifier
     */
    name: {
      type: String,
      required: true
    },

    /**
     * Human readable label descibing the filter
     */
    label: {
      type: String,
      required: false,
      default: function _default() {
        return '';
      }
    },

    /**
     * Indicates if filter is shown in collapsed state or not
     */
    collapsed: {
      type: Boolean,
      required: false,
      default: function _default() {
        return true;
      }
    },

    /**
     * Indicates if the user can collapse the filter
     */
    collapsable: {
      type: Boolean,
      required: false,
      default: function _default() {
        return true;
      }
    },

    /**
     * Human readable text with aditional description of the filter
     */
    description: {
      type: String,
      required: false,
      default: function _default() {
        return '';
      }
    },

    /**
     * Whether or not the user can remove the filter or not
     */
    canRemove: {
      type: Boolean,
      required: false,
      default: function _default() {
        return false;
      }
    }
  },
  data: function data() {
    return {
      isOpen: this.collapsable ? !this.collapsed : true
    };
  },
  computed: {
    cssClasses: function cssClasses() {
      var classes = this.headerClass.split(' ').filter(function (i) {
        return i;
      });

      if (this.collapsable) {
        classes.push('collapsable');
      }

      return classes.join(' ');
    },
    iconStyle: function iconStyle() {
      return {
        transform: "rotate(".concat(this.isOpen ? 90 : 0, "deg)"),
        transition: 'transform 0.2s'
      };
    }
  },
  methods: {
    removeFilter: function removeFilter() {
      this.$emit('removeFilter', this.name);
    },
    toggleState: function toggleState() {
      if (this.collapsable) {
        this.isOpen = !this.isOpen;
        return this.isOpen;
      }

      return false;
    }
  }
};

/* script */
var __vue_script__$5 = script$5;
/* template */

var __vue_render__$5 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("b-card", {
    staticClass: "filter-card mb-2",
    attrs: {
      "no-body": ""
    }
  }, [_c("b-card-header", {
    staticClass: "drag-handle",
    class: _vm.cssClasses,
    on: {
      click: _vm.toggleState
    }
  }, [_c("div", {
    staticClass: "title mr-3 px-1",
    attrs: {
      title: _vm.label
    }
  }, [_vm.collapsable ? _c("font-awesome-icon", {
    staticClass: "mr-2",
    style: _vm.iconStyle,
    attrs: {
      icon: "caret-right"
    }
  }) : _vm._e(), _vm._v("\n      " + _vm._s(_vm.label) + "\n      "), _vm.canRemove ? _c("span", {
    staticClass: "remove-button",
    on: {
      click: function click($event) {
        $event.stopPropagation();
        return _vm.removeFilter($event);
      }
    }
  }, [_c("font-awesome-icon", {
    attrs: {
      icon: "times"
    }
  })], 1) : _vm._e()], 1)]), _vm._v(" "), _c("b-collapse", {
    attrs: {
      id: _vm.name
    },
    model: {
      value: _vm.isOpen,
      callback: function callback($$v) {
        _vm.isOpen = $$v;
      },
      expression: "isOpen"
    }
  }, [_c("b-card-body", [_c("b-form-group", {
    attrs: {
      description: _vm.description
    }
  }, [_vm._t("default")], 2)], 1)], 1)], 1);
};

var __vue_staticRenderFns__$5 = [];
__vue_render__$5._withStripped = true;
/* style */

var __vue_inject_styles__$5 = undefined;
/* scoped */

var __vue_scope_id__$5 = "data-v-24b112ea";
/* module identifier */

var __vue_module_identifier__$5 = undefined;
/* functional template */

var __vue_is_functional_template__$5 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$5 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$5,
  staticRenderFns: __vue_staticRenderFns__$5
}, __vue_inject_styles__$5, __vue_script__$5, __vue_scope_id__$5, __vue_is_functional_template__$5, __vue_module_identifier__$5, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$6 = {
  name: 'MultiFilter',
  props: {
    /**
     * Toggle to switch between returning an array with values or an array with the full option
     */
    returnTypeAsObject: {
      type: Boolean,
      required: false,
      default: function _default() {
        return false;
      }
    },

    /**
     * The HTML input element name.
     */
    name: {
      type: String,
      required: true
    },

    /**
     * The HTML input element placeholder.
     */
    placeholder: {
      type: String,
      required: false,
      default: function _default() {
        return 'Type to search more';
      }
    },

    /**
     * The async method returning filter options.
     */
    options: {
      type: Function,
      required: true
    },

    /**
     * The amount of initial options to show.
     */
    initialDisplayItems: {
      type: Number,
      required: false,
      default: function _default() {
        return 1;
      }
    },

    /**
     * The amount of options available at one time
     * per search request
     */
    optionsWarningCount: {
      type: Number,
      required: false,
      default: 100
    },

    /**
     * @model
     */
    value: {
      type: Array,
      default: function _default() {
        return [];
      }
    },

    /**
     * The amount of options to show after filtering the checkbox options.
     */
    maxVisibleOptions: {
      type: Number,
      default: function _default() {
        return 10;
      }
    }
  },
  data: function data() {
    return {
      externalUpdate: false,
      showCount: 0,
      isLoading: false,
      triggerQuery: Number,
      inputOptions: [],
      initialOptions: [],
      selection: [],
      query: ''
    };
  },
  computed: {
    multifilterOptions: function multifilterOptions() {
      return this.inputOptions;
    },
    slicedOptions: function slicedOptions() {
      return this.multifilterOptions.slice(0, this.showCount);
    },
    foundOptionCount: function foundOptionCount() {
      return this.multifilterOptions.length;
    },
    showMoreText: function showMoreText() {
      var remaining = this.foundOptionCount - this.showCount;

      if (remaining <= this.maxVisibleOptions) {
        return "Show remaining ".concat(remaining);
      } else {
        return "Show ".concat(this.maxVisibleOptions, " more");
      }
    }
  },
  watch: {
    selection: function selection(newValue) {
      var newSelection;

      if (this.externalUpdate) {
        this.externalUpdate = false;
        return;
      }

      if (this.returnTypeAsObject) {
        newSelection = Object.assign(newValue, this.multifilterOptions.filter(function (mfo) {
          return newValue.includes(mfo.value);
        }));
      } else {
        newSelection = _toConsumableArray(newValue);
      }

      this.$emit('input', newSelection);
    },
    value: function value() {
      this.setValue();
    },
    query: function query(queryValue) {
      var _this = this;

      if (this.triggerQuery) {
        clearTimeout(this.triggerQuery);
      }

      if (!queryValue.length) {
        var newInititalOptions = [].concat(this.multifilterOptions);
        this.inputOptions = this.inputOptionsSort(newInititalOptions);
        return;
      }

      this.triggerQuery = setTimeout(function () {
        clearTimeout(_this.triggerQuery);
        _this.showCount = _this.maxVisibleOptions;
        _this.isLoading = true;

        _this.options({
          nameAttribute: 'label',
          query: _this.query
        }).then(function (searchResults) {
          var allOptions = searchResults ? searchResults.concat(_this.inputOptions) : _this.inputOptions;
          _this.inputOptions = _this.inputOptionsSort(allOptions);
        });

        _this.isLoading = false;
      }, 500);
    }
  },
  created: function created() {
    this.showCount = this.maxVisibleOptions;
  },
  beforeMount: function beforeMount() {
    this.initializeFilter();
  },
  methods: {
    inputOptionsSort: function inputOptionsSort(optionsArray) {
      var _this2 = this;

      optionsArray.sort(function (a, b) {
        if (!_this2.selection.includes(a.value) && !_this2.selection.includes(b.value)) {
          return 0;
        } else if (_this2.selection.includes(a.value) && !_this2.selection.includes(b.value)) {
          return -1;
        } else return 1;
      });
      return Array.from(new Set(optionsArray.map(function (cio) {
        return cio.value;
      }))).map(function (value) {
        return optionsArray.find(function (cio) {
          return cio.value === value;
        });
      });
    },
    setValue: function setValue() {
      this.externalUpdate = true;
      this.selection = _typeof(this.value[0]) === 'object' ? this.value.map(function (vo) {
        return vo.value;
      }) : this.value;
    },
    showMore: function showMore() {
      this.showCount += this.maxVisibleOptions;
    },
    initializeFilter: function initializeFilter() {
      var _this3 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var selectedOptions, completeInitialOptions;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                selectedOptions = [];

                if (!(_this3.value && _this3.value.length)) {
                  _context.next = 6;
                  break;
                }

                _this3.setValue(); // Get the initial selected


                _context.next = 5;
                return _this3.options({
                  nameAttribute: 'label',
                  queryType: 'in',
                  query: _this3.selection.join(',')
                });

              case 5:
                selectedOptions = _context.sent;

              case 6:
                _context.t0 = selectedOptions;
                _context.next = 9;
                return _this3.options({
                  nameAttribute: 'label',
                  count: _this3.initialDisplayItems
                });

              case 9:
                _context.t1 = _context.sent;
                completeInitialOptions = _context.t0.concat.call(_context.t0, _context.t1);
                // deduplicate by first mapping the id's then getting the first matching object back.
                _this3.initialOptions = _this3.inputOptionsSort(completeInitialOptions);
                _this3.inputOptions = _this3.initialOptions;

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  }
};

/* script */
var __vue_script__$6 = script$6;
/* template */

var __vue_render__$6 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", [_c("b-input-group", [_c("b-form-input", {
    attrs: {
      name: _vm.name,
      placeholder: _vm.placeholder,
      trim: ""
    },
    model: {
      value: _vm.query,
      callback: function callback($$v) {
        _vm.query = $$v;
      },
      expression: "query"
    }
  }), _vm._v(" "), _c("b-input-group-append", [_c("b-button", {
    attrs: {
      variant: "outline-secondary",
      disabled: _vm.isLoading
    },
    on: {
      click: function click($event) {
        $event.preventDefault();
        _vm.query = "";
      }
    }
  }, [_vm.isLoading ? _c("font-awesome-icon", {
    staticClass: "fa-spin",
    attrs: {
      icon: "spinner",
      size: "xs"
    }
  }) : _c("font-awesome-icon", {
    attrs: {
      icon: "times"
    }
  })], 1)], 1)], 1), _vm._v(" "), _vm.slicedOptions.length ? _c("b-form-checkbox-group", {
    staticClass: "checkbox-list",
    attrs: {
      name: _vm.name,
      options: _vm.slicedOptions,
      stacked: ""
    },
    model: {
      value: _vm.selection,
      callback: function callback($$v) {
        _vm.selection = $$v;
      },
      expression: "selection"
    }
  }) : _vm._e(), _vm._v(" "), _c("div", {
    staticClass: "d-flex"
  }, [_vm.showCount < _vm.multifilterOptions.length ? _c("b-link", {
    staticClass: "card-link",
    on: {
      click: _vm.showMore
    }
  }, [_vm._v("\n      " + _vm._s(_vm.showMoreText) + "\n    ")]) : _vm._e(), _vm._v(" "), _vm.foundOptionCount >= _vm.optionsWarningCount ? _c("div", {
    directives: [{
      name: "b-popover",
      rawName: "v-b-popover.hover",
      value: "There are " + _vm.optionsWarningCount + " or more results found, only the first " + _vm.optionsWarningCount + " are available. Please refine your search.",
      expression: "\n        `There are ${optionsWarningCount} or more results found, only the first ${optionsWarningCount} are available. Please refine your search.`\n      ",
      modifiers: {
        hover: true
      }
    }],
    staticClass: "badge badge-warning warning text-white ml-auto d-flex align-items-center"
  }, [_c("span", {
    staticClass: "mr-1"
  }, [_vm._v("\n        " + _vm._s(_vm.optionsWarningCount) + "+\n      ")]), _vm._v(" "), _c("font-awesome-icon", {
    attrs: {
      icon: "exclamation-circle"
    }
  })], 1) : _vm._e()], 1)], 1);
};

var __vue_staticRenderFns__$6 = [];
__vue_render__$6._withStripped = true;
/* style */

var __vue_inject_styles__$6 = undefined;
/* scoped */

var __vue_scope_id__$6 = "data-v-307a3192";
/* module identifier */

var __vue_module_identifier__$6 = undefined;
/* functional template */

var __vue_is_functional_template__$6 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$6 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$6,
  staticRenderFns: __vue_staticRenderFns__$6
}, __vue_inject_styles__$6, __vue_script__$6, __vue_scope_id__$6, __vue_is_functional_template__$6, __vue_module_identifier__$6, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$7 = {
  name: 'NumberFilter',
  props: {
    /**
     * The minimum allowed filter value.
     */
    min: {
      type: Number,
      default: function _default() {
        return Number.MIN_SAFE_INTEGER;
      }
    },

    /**
     * The maximum allowed filter value.
     */
    max: {
      type: Number,
      default: function _default() {
        return Number.MAX_SAFE_INTEGER;
      }
    },

    /**
     * Step size when using browser UI controls.
     */
    step: {
      type: Number,
      default: function _default() {
        return 1;
      }
    },

    /**
     * The number to be used in filtering items.
     * @model
     */
    value: {
      type: Number,
      default: function _default() {
        return 0;
      }
    },

    /**
     * Whether to use an additional UI slider to set the input value.
     */
    useSlider: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    }
  },
  computed: {
    model: {
      get: function get() {
        return this.value;
      },

      /**
       * v-model return value
       *
       * @event input
       * @property {Array} Returns new array without the deleted item
       */
      set: function set(value) {
        if (typeof value === 'string' && value === '') {
          this.$emit('input', undefined);
        } else {
          value = Math.min(Math.max(value, this.min), this.max);
          /**
          * v-model return value
          *
          * @event input
          * @property {Float} Returns new filter value or NaN
          */

          this.$emit('input', parseFloat(value));
        }
      }
    }
  }
};

/* script */
var __vue_script__$7 = script$7;
/* template */

var __vue_render__$7 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", [_c("b-input-group", [_c("b-form-input", {
    attrs: {
      type: "number",
      min: _vm.min,
      max: _vm.max,
      step: _vm.step
    },
    model: {
      value: _vm.model,
      callback: function callback($$v) {
        _vm.model = $$v;
      },
      expression: "model"
    }
  })], 1), _vm._v(" "), _vm.useSlider ? _c("vue-slider", {
    staticClass: "mt-2",
    attrs: {
      min: _vm.min,
      max: _vm.max,
      interval: _vm.step
    },
    model: {
      value: _vm.model,
      callback: function callback($$v) {
        _vm.model = $$v;
      },
      expression: "model"
    }
  }) : _vm._e()], 1);
};

var __vue_staticRenderFns__$7 = [];
__vue_render__$7._withStripped = true;
/* style */

var __vue_inject_styles__$7 = undefined;
/* scoped */

var __vue_scope_id__$7 = undefined;
/* module identifier */

var __vue_module_identifier__$7 = undefined;
/* functional template */

var __vue_is_functional_template__$7 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$7 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$7,
  staticRenderFns: __vue_staticRenderFns__$7
}, __vue_inject_styles__$7, __vue_script__$7, __vue_scope_id__$7, __vue_is_functional_template__$7, __vue_module_identifier__$7, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$8 = {
  name: 'RangeFilter',
  props: {
    /**
     * The minimum allowed filter value.
     */
    min: {
      type: Number,
      default: function _default() {
        return Number.MIN_SAFE_INTEGER;
      }
    },

    /**
     * The maximum allowed filter value.
     */
    max: {
      type: Number,
      default: function _default() {
        return Number.MAX_SAFE_INTEGER;
      }
    },

    /**
     * Step size when using browser UI controls.
     */
    step: {
      type: Number,
      default: function _default() {
        return 1;
      }
    },

    /**
     * The number to be used in filtering items.
     * @model
     */
    value: {
      type: Array,
      default: function _default() {
        return [null, null];
      }
    },

    /**
     * Whether to use an additional UI slider to set the input value.
     */
    useSlider: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    }
  },
  data: function data() {
    return {
      rangeValue: this.value
    };
  },
  watch: {
    value: function value(newValue) {
      if (newValue[0] == null && newValue[1] == null) {
        this.rangeValue = [null, null];
      }
    }
  },
  methods: {
    setRangeValue: function setRangeValue(id, value) {
      this.rangeValue[id] = value;
      this.handleRangeValueChange();
    },
    clampValue: function clampValue(value, max, min) {
      return Math.min(Math.max(value, min), max);
    },
    handleRangeValueChange: function handleRangeValueChange() {
      if (this.rangeValue[0] === '') {
        this.rangeValue[0] = null;
      }

      if (this.rangeValue[1] === '') {
        this.rangeValue[1] = null;
      }

      if (this.rangeValue[0] != null) {
        this.rangeValue[0] = this.clampValue(this.rangeValue[0], this.max, this.min);
      }

      if (this.rangeValue[1] != null) {
        this.rangeValue[1] = this.clampValue(this.rangeValue[1], this.max, this.min);
      }

      this.rangeValue = [this.rangeValue[0], this.rangeValue[1]];
      /**
      * Clone to break reactive loop.
      * @property {Array} rangeValue Range filter value
      */

      this.$emit('input', _toConsumableArray(this.rangeValue));
    }
  }
};

/* script */
var __vue_script__$8 = script$8;
/* template */

var __vue_render__$8 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", [_c("b-input-group", {
    staticClass: "mb-1"
  }, [_c("b-form-input", {
    staticClass: "text-center range-from",
    attrs: {
      type: "number",
      min: _vm.min,
      max: _vm.max,
      placeholder: "from",
      step: _vm.step
    },
    on: {
      input: _vm.handleRangeValueChange
    },
    model: {
      value: _vm.rangeValue[0],
      callback: function callback($$v) {
        _vm.$set(_vm.rangeValue, 0, $$v);
      },
      expression: "rangeValue[0]"
    }
  }), _vm._v(" "), _c("b-input-group-append", [_c("b-button", {
    staticClass: "clear-from",
    attrs: {
      variant: "outline-secondary"
    },
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.setRangeValue(0, null);
      }
    }
  }, [_c("font-awesome-icon", {
    attrs: {
      icon: "times"
    }
  })], 1)], 1)], 1), _vm._v(" "), _c("b-input-group", [_c("b-form-input", {
    staticClass: "text-center range-to",
    attrs: {
      type: "number",
      min: _vm.min,
      max: _vm.max,
      placeholder: "to",
      step: _vm.step
    },
    on: {
      input: _vm.handleRangeValueChange
    },
    model: {
      value: _vm.rangeValue[1],
      callback: function callback($$v) {
        _vm.$set(_vm.rangeValue, 1, $$v);
      },
      expression: "rangeValue[1]"
    }
  }), _vm._v(" "), _c("b-input-group-append", [_c("b-button", {
    staticClass: "clear-to",
    attrs: {
      variant: "outline-secondary"
    },
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.setRangeValue(1, null);
      }
    }
  }, [_c("font-awesome-icon", {
    attrs: {
      icon: "times"
    }
  })], 1)], 1)], 1), _vm._v(" "), _vm.useSlider ? _c("vue-slider", {
    staticClass: "mt-2",
    attrs: {
      min: _vm.min,
      max: _vm.max,
      interval: _vm.step
    },
    on: {
      change: _vm.handleRangeValueChange
    },
    model: {
      value: _vm.rangeValue,
      callback: function callback($$v) {
        _vm.rangeValue = $$v;
      },
      expression: "rangeValue"
    }
  }) : _vm._e(), _vm._v(" "), _vm.min != Number.MIN_SAFE_INTEGER && _vm.max != Number.MAX_SAFE_INTEGER ? _c("small", {
    staticClass: "form-text text-muted"
  }, [_vm._v("In a range of " + _vm._s(_vm.min) + " and " + _vm._s(_vm.max))]) : _vm._e()], 1);
};

var __vue_staticRenderFns__$8 = [];
__vue_render__$8._withStripped = true;
/* style */

var __vue_inject_styles__$8 = undefined;
/* scoped */

var __vue_scope_id__$8 = undefined;
/* module identifier */

var __vue_module_identifier__$8 = undefined;
/* functional template */

var __vue_is_functional_template__$8 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$8 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$8,
  staticRenderFns: __vue_staticRenderFns__$8
}, __vue_inject_styles__$8, __vue_script__$8, __vue_scope_id__$8, __vue_is_functional_template__$8, __vue_module_identifier__$8, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$9 = {
  name: 'StringFilter',
  props: {
    /**
     * The HTML input element name.
     */
    name: {
      type: String,
      required: true
    },

    /**
     * The HTML input element placeholder.
     */
    placeholder: {
      type: String,
      required: false,
      default: function _default() {
        return '';
      }
    },

    /**
     * The StringFilter model value.
     * @model
     */
    value: {
      type: String,
      default: function _default() {
        return '';
      }
    }
  },
  computed: {
    model: {
      get: function get() {
        return this.value || '';
      },
      set: function set(value) {
        this.$emit('input', value === '' ? undefined : value);
      }
    }
  }
};

/* script */
var __vue_script__$9 = script$9;
/* template */

var __vue_render__$9 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("b-input-group", [_c("b-form-input", {
    attrs: {
      name: _vm.name,
      placeholder: _vm.placeholder,
      trim: ""
    },
    model: {
      value: _vm.model,
      callback: function callback($$v) {
        _vm.model = $$v;
      },
      expression: "model"
    }
  }), _vm._v(" "), _c("b-input-group-append", [_c("b-button", {
    attrs: {
      variant: "outline-secondary"
    },
    on: {
      click: function click($event) {
        $event.preventDefault();
        _vm.model = "";
      }
    }
  }, [_c("font-awesome-icon", {
    attrs: {
      icon: "times"
    }
  })], 1)], 1)], 1);
};

var __vue_staticRenderFns__$9 = [];
__vue_render__$9._withStripped = true;
/* style */

var __vue_inject_styles__$9 = undefined;
/* scoped */

var __vue_scope_id__$9 = undefined;
/* module identifier */

var __vue_module_identifier__$9 = undefined;
/* functional template */

var __vue_is_functional_template__$9 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$9 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$9,
  staticRenderFns: __vue_staticRenderFns__$9
}, __vue_inject_styles__$9, __vue_script__$9, __vue_scope_id__$9, __vue_is_functional_template__$9, __vue_module_identifier__$9, false, undefined, undefined, undefined);

var script$a = {
  name: 'FilterContainer',
  components: {
    ActiveFilters: __vue_component__,
    ChangeFilters: __vue_component__$1,
    CheckboxFilter: __vue_component__$2,
    DateTimeFilter: __vue_component__$4,
    MultiFilter: __vue_component__$6,
    NumberFilter: __vue_component__$7,
    RangeFilter: __vue_component__$8,
    StringFilter: __vue_component__$9,
    FilterCard: __vue_component__$5
  },
  props: {
    /**
     * An array of filters to render.
     */
    filters: {
      type: Array,
      required: true
    },

    /**
     * Object Key/values of filter names/values from all concerned filters.
     * @model
     */
    value: {
      type: Object,
      default: function _default() {
        return {};
      }
    },

    /**
     * The filters to show; an array of filter name properties.
     */
    filtersShown: {
      type: Array,
      required: false,
      default: function _default() {
        return [];
      }
    },

    /**
     * Lock or unluck filter addition/removal.
     */
    canEdit: {
      type: Boolean,
      required: false,
      default: function _default() {
        return false;
      }
    },

    /**
    * Set active filters selection dialogue style, choose between 'dropdown' or 'modal'.
    * Defaults to using 'dropdown'
    */
    dialogStyle: {
      type: String,
      required: false,
      default: function _default() {
        return 'dropdown';
      }
    },

    /**
    * Change action label
    */
    filterActionLabel: {
      type: String,
      required: false,
      default: function _default() {
        return 'Add filter';
      }
    },

    /**
    * Filter list label
    */
    filterListLabel: {
      type: String,
      required: false,
      default: function _default() {
        return 'Filters';
      }
    }
  },
  data: function data() {
    return {
      filtersToShow: this.filtersShown,
      filterToAdd: null,
      drag: false,
      width: 0,
      mobileToggle: false
    };
  },
  computed: {
    doCollapse: function doCollapse() {
      // Bootstrap's mobile collapse width
      return this.width <= 576;
    },
    doDragDrop: function doDragDrop() {
      return this.canEdit && !this.doCollapse;
    },
    listOfVisibleFilters: function listOfVisibleFilters() {
      var _this = this;

      return this.filtersToShow.map(function (id) {
        return _this.filters.find(function (filter) {
          return filter.name === id;
        });
      }).filter(function (item) {
        return item !== undefined;
      }).filter(function (item) {
        return item.type !== 'compound-title';
      });
    }
  },
  watch: {
    filtersShown: function filtersShown(newValue) {
      this.filtersToShow = newValue;
    }
  },
  created: function created() {
    window.addEventListener('resize', this.handleResize);
    this.handleResize();
  },
  destroyed: function destroyed() {
    window.removeEventListener('resize', this.handleResize);
  },
  methods: {
    handleResize: function handleResize() {
      this.width = window.innerWidth;
    },
    removeFilter: function removeFilter(name) {
      this.filtersToShow = this.filtersToShow.filter(function (filter) {
        return name !== filter;
      });
      /**
       * Emit the filters that are supposed to be visible.
       * @property {Array} filtersToShow - An array of filter name properties
       * @event update
       */

      this.$emit('update', this.filtersToShow);

      var selections = _objectSpread2({}, this.value);

      delete selections[name];
      this.$emit('input', selections);
    },
    selectionChange: function selectionChange(name, value) {
      /**
       * Update the model with the updated values from related filters.
       * @property {Object} - Filter name/value
       * @event input
       */
      // clear an empty checkbox and range filter
      if (Array.isArray(value)) {
        if (value.length === 0) {
          value = undefined;
        } else if (value.every(function (item) {
          return item === null;
        })) {
          value = undefined;
        }
      }

      var newSelection = _objectSpread2(_objectSpread2({}, this.value), {}, _defineProperty({}, name, value)); // remove all undefined properties


      Object.keys(newSelection).forEach(function (key) {
        return newSelection[key] === undefined && delete newSelection[key];
      });
      this.$emit('input', newSelection);
    },
    selectionUpdate: function selectionUpdate() {
      this.$emit('update', this.filtersToShow);
    }
  }
};

/* script */
var __vue_script__$a = script$a;
/* template */

var __vue_render__$a = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", {
    staticClass: "filter-container",
    on: {
      mouseup: function mouseup($event) {
        _vm.drag = false;
      }
    }
  }, [_vm.canEdit && _vm.filters.length > 0 ? _c("div", {
    staticClass: "change-filters"
  }, [_vm.dialogStyle == "dropdown" ? _c("b-dropdown", {
    ref: "addFilter",
    staticClass: "mb-2",
    attrs: {
      variant: "outline-primary",
      boundary: "window",
      "menu-class": "shadow ml-2",
      dropright: "",
      "no-caret": "",
      block: ""
    },
    scopedSlots: _vm._u([{
      key: "button-content",
      fn: function fn() {
        return [_c("font-awesome-icon", {
          staticClass: "mr-1",
          attrs: {
            icon: "filter"
          }
        }), _vm._v(" " + _vm._s(_vm.filterActionLabel) + "\n      ")];
      },
      proxy: true
    }], null, false, 865719074)
  }, [_vm._v(" "), _c("b-dropdown-text", [_vm._v("\n        " + _vm._s(_vm.filterListLabel) + "\n        "), _c("span", {
    staticClass: "float-right btn-close-filter-dialog",
    on: {
      click: function click($event) {
        $event.stopPropagation();
        return _vm.$refs.addFilter.hide(true);
      }
    }
  }, [_c("font-awesome-icon", {
    attrs: {
      icon: "times"
    }
  })], 1)]), _vm._v(" "), _c("b-dropdown-form", [_c("change-filters", {
    attrs: {
      filters: _vm.filters
    },
    on: {
      input: _vm.selectionUpdate
    },
    model: {
      value: _vm.filtersToShow,
      callback: function callback($$v) {
        _vm.filtersToShow = $$v;
      },
      expression: "filtersToShow"
    }
  })], 1)], 1) : _c("button", {
    directives: [{
      name: "b-modal",
      rawName: "v-b-modal.change-filters-modal",
      modifiers: {
        "change-filters-modal": true
      }
    }],
    staticClass: "btn btn-block btn-primary text-nowrap"
  }, [_vm._v("\n      " + _vm._s(_vm.filterListLabel)), _c("font-awesome-icon", {
    staticClass: "ml-1",
    attrs: {
      icon: "caret-right"
    }
  })], 1), _vm._v(" "), _c("b-modal", {
    attrs: {
      id: "change-filters-modal",
      title: "Change filters",
      "hide-footer": "",
      "hide-header": "",
      scrollable: ""
    }
  }, [_c("change-filters", {
    attrs: {
      filters: _vm.filters
    },
    on: {
      input: _vm.selectionUpdate
    },
    model: {
      value: _vm.filtersToShow,
      callback: function callback($$v) {
        _vm.filtersToShow = $$v;
      },
      expression: "filtersToShow"
    }
  })], 1)], 1) : _vm._e(), _vm._v(" "), _c("b-collapse", {
    attrs: {
      id: "mobile-button-toggle",
      visible: _vm.doCollapse
    }
  }, [_c("button", {
    staticClass: "btn w-100 my-2 btn-outline-secondary",
    on: {
      click: function click($event) {
        _vm.mobileToggle = !_vm.mobileToggle;
      }
    }
  }, [_vm._v("\n      " + _vm._s(_vm.mobileToggle ? "Hide filters" : "Show filters") + "\n    ")])]), _vm._v(" "), _c("b-collapse", {
    attrs: {
      id: "mobile-toggle",
      visible: !_vm.doCollapse || _vm.mobileToggle
    }
  }, [_c("draggable", {
    class: {
      dragdrop: _vm.doDragDrop,
      dragging: _vm.drag
    },
    attrs: {
      handle: ".drag-handle",
      disabled: !_vm.doDragDrop
    },
    on: {
      choose: function choose($event) {
        _vm.drag = true;
      },
      end: function end($event) {
        _vm.drag = false;
      },
      input: _vm.selectionUpdate
    },
    model: {
      value: _vm.filtersToShow,
      callback: function callback($$v) {
        _vm.filtersToShow = $$v;
      },
      expression: "filtersToShow"
    }
  }, [_c("transition-group", _vm._l(_vm.listOfVisibleFilters, function (filter) {
    return _c("filter-card", _vm._b({
      key: filter.name,
      attrs: {
        "can-remove": _vm.canEdit
      },
      on: {
        removeFilter: function removeFilter($event) {
          return _vm.removeFilter(filter.name);
        }
      }
    }, "filter-card", filter, false), [_c(filter.type, _vm._b({
      tag: "component",
      attrs: {
        name: filter.name,
        value: _vm.value[filter.name]
      },
      on: {
        input: function input(value) {
          return _vm.selectionChange(filter.name, value);
        }
      }
    }, "component", filter, false))], 1);
  }), 1)], 1)], 1)], 1);
};

var __vue_staticRenderFns__$a = [];
__vue_render__$a._withStripped = true;
/* style */

var __vue_inject_styles__$a = undefined;
/* scoped */

var __vue_scope_id__$a = "data-v-af3131da";
/* module identifier */

var __vue_module_identifier__$a = undefined;
/* functional template */

var __vue_is_functional_template__$a = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$a = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$a,
  staticRenderFns: __vue_staticRenderFns__$a
}, __vue_inject_styles__$a, __vue_script__$a, __vue_scope_id__$a, __vue_is_functional_template__$a, __vue_module_identifier__$a, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script$b = {
  name: 'Pagination',
  props: {
    /**
     * Extra css classes for the pagination buttons.
     */
    css: {
      type: Object,
      required: false,
      default: function _default() {
        return {};
      }
    },

    /**
     * Translatable texts.
     */
    i18n: {
      type: Object,
      default: function _default() {
        return {
          page: 'page',
          'per page': 'per page',
          items: 'items'
        };
      }
    },

    /**
     * Select choices for the page size.
     */
    pageSizes: {
      type: Array,
      required: false,
      default: function _default() {
        return [10, 20, 50];
      }
    },

    /**
     * Reflects the pagination state.
     * @model
     */
    value: {
      type: Object,
      required: true
    },

    /**
     * Number of navigational page buttons; this must be uneven.
     */
    visiblePages: {
      type: Number,
      default: function _default() {
        return 7;
      },
      validator: function validator(value) {
        return value % 2 !== 0;
      }
    }
  },
  data: function data() {
    return {
      localValue: {
        size: 20,
        page: 1,
        loading: false,
        count: 0
      }
    };
  },
  computed: {
    navigationText: function navigationText() {
      if (this.pageCount <= 1) {
        return "".concat(this.i18n.items, ": ").concat(this.localValue.count);
      } else {
        return "".concat(this.i18n.page, " ").concat(this.localValue.page, "/").concat(this.pageCount, " (").concat(this.localValue.count, " ").concat(this.i18n.items, ")");
      }
    },
    pageCount: function pageCount() {
      if (!this.localValue.count) {
        return 0;
      }

      return Math.ceil(this.localValue.count / this.localValue.size);
    },
    pageNumbers: function pageNumbers() {
      var pages = [];

      for (var i = this.pageRange.left; i <= this.pageRange.right; i++) {
        pages.push(i);
      }

      return pages;
    },

    /**
     * Calculations that determine which pages must be rendered.
     * See the computed `pageNumbers` method for its usage.
     */
    pageRange: function pageRange() {
      var edge = Math.floor(this.visiblePages / 2);
      var start = this.localValue.page <= edge;
      var end = this.localValue.page >= Math.floor(this.localValue.count / this.localValue.size) - edge;
      var left, right;

      if (start) {
        left = 1;
        right = this.pageCount > this.visiblePages ? this.visiblePages : this.pageCount;
      } else if (end) {
        left = this.pageCount - this.visiblePages > 0 ? this.pageCount - this.visiblePages + 1 : 1;
        right = this.pageCount;
      } else {
        // Must be within the mid-range.
        left = this.localValue.page - edge;
        right = this.localValue.page + edge;
      }

      return {
        left: left,
        right: right
      };
    }
  },
  watch: {
    /**
     * Sync the local state when the external state changes.
     */
    value: {
      handler: function handler(value) {
        this.localValue = value;
      },
      deep: true
    }
  },
  created: function created() {
    var _this = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.localValue = _objectSpread2(_objectSpread2({}, _this.localValue), _this.value);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  methods: {
    updateValue: function updateValue(value) {
      this.localValue = _objectSpread2(_objectSpread2(_objectSpread2({}, this.localValue), this.value), value);
      this.$emit('input', _objectSpread2({}, this.localValue));
    },
    handleSizeChange: function handleSizeChange() {
      this.updateValue({
        page: 1,
        size: this.localValue.size
      });
    }
  }
};

/* script */
var __vue_script__$b = script$b;
/* template */

var __vue_render__$b = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("nav", {
    staticClass: "c-pagination"
  }, [_vm.localValue.count > _vm.localValue.size ? _c("div", {
    staticClass: "btn-group mb-2 mr-3"
  }, [_c("button", {
    staticClass: "btn btn-outline-primary",
    class: _vm.css,
    attrs: {
      disabled: _vm.localValue.page <= 1
    },
    on: {
      click: function click($event) {
        return _vm.updateValue({
          page: 1
        });
      }
    }
  }, [_vm._v("\n      «\n    ")]), _vm._v(" "), _c("button", {
    staticClass: "t-page-prev btn btn-outline-primary",
    class: _vm.css,
    attrs: {
      disabled: _vm.localValue.page <= 1
    },
    on: {
      click: function click($event) {
        return _vm.updateValue({
          page: _vm.localValue.page - 1
        });
      }
    }
  }, [_vm._v("\n      ‹\n    ")]), _vm._v(" "), _vm._l(_vm.pageNumbers, function (pageNumber) {
    return _c("button", {
      key: pageNumber,
      staticClass: "btn btn-outline-primary",
      class: Object.assign({}, {
        active: pageNumber === _vm.localValue.page
      }, _vm.css),
      on: {
        click: function click($event) {
          return _vm.updateValue({
            page: pageNumber
          });
        }
      }
    }, [_vm._v("\n      " + _vm._s(pageNumber) + "\n    ")]);
  }), _vm._v(" "), _c("button", {
    staticClass: "t-page-next btn btn-outline-primary",
    class: _vm.css,
    attrs: {
      disabled: _vm.localValue.page >= _vm.pageCount
    },
    on: {
      click: function click($event) {
        return _vm.updateValue({
          page: _vm.localValue.page + 1
        });
      }
    }
  }, [_vm._v("\n      ›\n    ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-outline-primary",
    class: _vm.css,
    attrs: {
      disabled: _vm.localValue.page >= _vm.pageCount
    },
    on: {
      click: function click($event) {
        return _vm.updateValue({
          page: _vm.pageCount
        });
      }
    }
  }, [_vm._v("\n      »\n    ")])], 2) : _vm._e(), _vm._v(" "), _c("div", {
    staticClass: "controls mb-2"
  }, [_c("div", {
    staticClass: "item-count form-inline mr-2"
  }, [_c("span", [_vm._v(_vm._s(_vm.navigationText))])]), _vm._v(" "), _c("div", {
    staticClass: "form-check form-check-inline"
  }, [_c("label", {
    staticClass: "form-check-label mr-2",
    attrs: {
      for: "page-size"
    }
  }, [_vm._v(_vm._s(_vm.i18n["per page"]))]), _vm._v(" "), _c("select", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.localValue.size,
      expression: "localValue.size"
    }],
    staticClass: "form-control",
    attrs: {
      id: "page-size"
    },
    on: {
      change: [function ($event) {
        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {
          return o.selected;
        }).map(function (o) {
          var val = "_value" in o ? o._value : o.value;
          return val;
        });

        _vm.$set(_vm.localValue, "size", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);
      }, _vm.handleSizeChange]
    }
  }, _vm._l(_vm.pageSizes, function (pageSize) {
    return _c("option", {
      key: pageSize,
      domProps: {
        value: pageSize
      }
    }, [_vm._v("\n          " + _vm._s(pageSize) + "\n        ")]);
  }), 0)])])]);
};

var __vue_staticRenderFns__$b = [];
__vue_render__$b._withStripped = true;
/* style */

var __vue_inject_styles__$b = undefined;
/* scoped */

var __vue_scope_id__$b = undefined;
/* module identifier */

var __vue_module_identifier__$b = undefined;
/* functional template */

var __vue_is_functional_template__$b = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$b = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$b,
  staticRenderFns: __vue_staticRenderFns__$b
}, __vue_inject_styles__$b, __vue_script__$b, __vue_scope_id__$b, __vue_is_functional_template__$b, __vue_module_identifier__$b, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var defaultTimeout = 3000;
var script$c = {
  name: 'Toaster',
  props: {
    /**
     * List of toasts to show (see types/Toast.ts)
     * @model
     */
    value: {
      type: Array,
      required: true
    },

    /**
     * Position of toast in window
     * Fixed positioning: 'top-left', 'bottom-left', 'top-right', 'bottom-right'
     * Or Inline using: 'inline'
     */
    position: {
      type: String,
      default: function _default() {
        return 'bottom-right';
      }
    }
  },
  data: function data() {
    return {
      toasts: _toConsumableArray(this.value)
    };
  },
  watch: {
    value: {
      handler: function handler(newValue, oldValue) {
        var _this = this;

        this.$set(this, 'toasts', _toConsumableArray(newValue)); // Only process timeout for new toasts. Old value is empty
        // when called on creation, due to immediately watch property.

        if (oldValue && newValue.length < oldValue.length) return;

        var _iterator = _createForOfIteratorHelper(newValue),
            _step;

        try {
          var _loop = function _loop() {
            var toast = _step.value;
            // Timeout already scheduled.
            if (toast.timeout === -1) return "continue"; // New toast has an explicitly disabled timeout.

            if (toast.timeout === 0) return "continue";

            if (!toast.timeout) {
              toast.timeout = defaultTimeout;
            }

            setTimeout(function () {
              _this.clearToast(toast);
            }, toast.timeout);
            toast.timeout = -1;
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _ret = _loop();

            if (_ret === "continue") continue;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      immediate: true
    }
  },
  methods: {
    clearToast: function clearToast(toast) {
      this.toasts.splice(this.toasts.indexOf(toast), 1);
      /**
      * v-model return value
      * @event input
      * @property {Object[]} Toasts array with toast removed
      */

      this.$emit('input', _toConsumableArray(this.toasts));
    }
  }
};

/* script */
var __vue_script__$c = script$c;
/* template */

var __vue_render__$c = function __vue_render__() {
  var _obj;

  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", {
    staticClass: "c-toaster",
    class: (_obj = {}, _obj[_vm.position] = true, _obj)
  }, _vm._l(_vm.toasts, function (toast, index) {
    var _obj;

    return _c("div", {
      key: index,
      staticClass: "mg-toast alert alert-dismissible fade show shadow-sm",
      class: (_obj = {}, _obj["alert-" + toast.type] = true, _obj)
    }, [_c("div", {
      staticClass: "mg-toast-message",
      domProps: {
        innerHTML: _vm._s(toast.message)
      }
    }), _vm._v(" "), _c("button", {
      staticClass: "close",
      attrs: {
        type: "button"
      },
      on: {
        click: function click($event) {
          return _vm.clearToast(toast);
        }
      }
    }, [_c("span", {
      attrs: {
        "aria-hidden": "true"
      }
    }, [_vm._v("×")])])]);
  }), 0);
};

var __vue_staticRenderFns__$c = [];
__vue_render__$c._withStripped = true;
/* style */

var __vue_inject_styles__$c = undefined;
/* scoped */

var __vue_scope_id__$c = undefined;
/* module identifier */

var __vue_module_identifier__$c = undefined;
/* functional template */

var __vue_is_functional_template__$c = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$c = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$c,
  staticRenderFns: __vue_staticRenderFns__$c
}, __vue_inject_styles__$c, __vue_script__$c, __vue_scope_id__$c, __vue_is_functional_template__$c, __vue_module_identifier__$c, false, undefined, undefined, undefined);

exports.ActiveFilters = __vue_component__;
exports.CartSelectionToast = __vue_component__$3;
exports.ChangeFilters = __vue_component__$1;
exports.CheckboxFilter = __vue_component__$2;
exports.DateTimeFilter = __vue_component__$4;
exports.FilterCard = __vue_component__$5;
exports.FilterContainer = __vue_component__$a;
exports.MultiFilter = __vue_component__$6;
exports.NumberFilter = __vue_component__$7;
exports.Pagination = __vue_component__$b;
exports.RangeFilter = __vue_component__$8;
exports.StringFilter = __vue_component__$9;
exports.Toaster = __vue_component__$c;
//# sourceMappingURL=components-library.common.js.map
