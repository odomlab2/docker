{"version":3,"file":null,"sources":["../src/molgenis-api-client.js"],"sourcesContent":["import 'isomorphic-fetch'\nimport { merge } from 'lodash'\nimport FormData from 'form-data'\n\nconst defaultOptions = {\n  'headers': {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest'\n  },\n  'credentials': 'same-origin'\n}\n\nconst isJsonResponse = (response) => {\n  const contentType = response.headers.get('content-type')\n  if (!contentType) {\n    return false\n  }\n  // Ignore case, whitespace and double quotes around charset as per http spec (https://tools.ietf.org/html/rfc7231#section-3.1.1.5)\n  const normalizedContentType = contentType.toLowerCase().split(' ').join('').split('\"').join('')\n  return normalizedContentType === 'application/json' || normalizedContentType === 'application/json;charset=utf-8'\n}\n\n/**\n * Handle the JSON response from the server.\n *\n * When an error occurs a default ErrorResponse from the server is returned.\n * This ErrorResponse returns an array of errors and error-codes\n *\n * Example errorResponse\n * @example\n * {\"errors\":\n *   [\n *     {\n *       \"message\":\"Group name 'test' is not a available, please choose a different group name.\",\n *       \"code\":\"DS16\"\n *     }\n *   ]\n * }\n *\n * note: there could be more than one error\n *\n */\nconst handleResponse = (response) => {\n  if (isJsonResponse(response)) {\n    return response.json().then(json => response.ok ? json : Promise.reject(json))\n  } else {\n    return response.ok ? response : Promise.reject(response)\n  }\n}\n\n/**\n * Merges passed options with default options, if force option is set defaults are ignored.\n * The passed method is always respected, regardless of the force option\n * @param method, http method to use ( supported are; get, put, post and delete)\n * @param options, (options to be merged with 'defaultOptions' options)\n * @param force, ( flag if set to true, default options are ignored, and passed options are merged with 'method' only\n * @returns object containing merged options\n */\nconst mergeOptions = (method, options, force) => {\n  return force ? { ...options, method: method } : merge({ method: method }, defaultOptions, options)\n}\n\n/**\n * Get a JSON object from the server\n * Uses your session ID to authenticate\n *\n * @example <caption>Example of how to use the get method</caption>\n * // Handle a promise from calling /api/v2/EntityType\n * get('/api/v2/EntityType').then(response => {...}, error => {...}))\n *\n * @example <caption>Example of how to use the get method with an added option</caption>\n * // Handle a promise from calling /api/v2/EntityType with different content type\n * get('/api/v2/EntityType', { headers: { 'Content-type': 'text' } }).then(response => {...}, error => {...})\n *\n * @param url The URL to post to e.g. /api/v2/my_data_set\n * @param options_ An object containing additional options like headers or body\n * @param forceOptions optional boolean if set to true options are not merged with defaults but used as passed,\n * defaults to false.\n */\nconst get = (url, options_, forceOptions) => {\n  return fetch(url, mergeOptions('GET', options_, forceOptions)).then(handleResponse).then(response => response)\n}\n\n/**\n * Post a body of data to the server\n * Uses your session ID to authenticate\n *\n * @example <caption>Example of how to use the post method</caption>\n * // Post a data object and handle the response\n * const data = {\n *  items: ['1', '2'],\n *  id: 'example'\n * }\n *\n * const options = {\n *  body: data\n * }\n *\n * post('api/v2/PostData', options).then(response => {...}, error => {...})\n *\n * @param url\n * @param options_\n * @param forceOptions optional boolean if set to true options are not merged with defaults but used as passed,\n * defaults to false.\n */\nconst post = (url, options_, forceOptions) => {\n  return fetch(url, mergeOptions('POST', options_, forceOptions)).then(handleResponse).then(response => response)\n}\n\n/**\n * Put a body of data to the server\n * Uses your session ID to authenticate\n *\n * @example <caption>Example of how to use the post method</caption>\n * // Put a data object and handle the response\n * const data = {\n *  items: ['1', '2'],\n *  id: 'example'\n * }\n *\n * const options = {\n *  body: data\n * }\n *\n * put('api/v2/PostData', options).then(response => {...}, error => {...})\n *\n * @param url\n * @param options_\n * @param forceOptions optional boolean if set to true options are not merged by used as passed, defaults to false\n */\nconst put = (url, options_, forceOptions) => {\n  return fetch(url, mergeOptions('PUT', options_, forceOptions)).then(handleResponse).then(response => response)\n}\n\n/**\n * Call a delete method on the server\n * Uses your session ID to authenticate\n *\n * @example <caption>Example of how to use the delete_ method</caption>\n * // Handle the response from calling DELETE on /api/v2/deleteById/1\n * delete_('/api/v2/deleteById/1').then(response => {...}, error => {...})\n *\n * @param url\n * @param options_\n * @param forceOptions optional boolean if set to true options are not merged by used as passed, defaults to false\n */\nconst delete_ = (url, options_, forceOptions) => {\n  return fetch(url, mergeOptions('DELETE', options_, forceOptions)).then(handleResponse).then(response => response)\n}\n\n/**\n * Post a file to the server\n * FormData is created with a 'file' parameter. A POST is then automatically created.\n * Uses your session ID to authenticate\n *\n * Expects the response from the server to contain a Job URL\n *\n * @example <caption>Example of how the use the postFile method</caption>\n * // Post a file and handle the response\n * postFile('/plugin/one-click-importer/upload', myAwesomeFile).then(response => {...}, error => {...})\n *\n * @param url\n * @param file\n */\nconst postFile = (url, file) => {\n  const form = new FormData()\n  form.append('file', file)\n\n  const options = {\n    body: form,\n    method: 'POST',\n    credentials: 'same-origin'\n  }\n\n  return fetch(url, options).then(handleResponse).then(response => response)\n}\n\nexport default { get, post, put, delete_, postFile }\n"],"names":["defaultOptions","isJsonResponse","response","contentType","headers","get","normalizedContentType","toLowerCase","split","join","handleResponse","json","then","ok","reject","mergeOptions","method","options","force","merge","url","options_","forceOptions","fetch","post","put","delete_","postFile","file","form","FormData","append"],"mappings":"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"}